<?phpnamespace app\index\controller;use app\common\controller\IndexBase;use app\common\extend\alipay\Alipay;use app\common\extend\wechat\WechatPay;use app\common\extend\wechat\WechatJsapi;class User extends IndexBase{    protected $noLogin = ['login', 'reg','findpass','binding','vip','certificate','shere','certificateverify'];    protected $noAuth = ['uploadImage', 'uploadFile', 'uploadVideo','findpass','binding','certificate','shere','certificateverify'];    protected function _initialize()    {        parent::_initialize();        !$this->checkLogin() && $this->redirect(url('index/user/login'));        $videotuijian=model('videoCourse')->orderRaw('rand()')->where(['is_hot'=>1,'status'=>1])->limit(2)->select();        $livetuijian=model('liveCourse')->orderRaw('rand()')->where(['is_hot'=>1,'status'=>1])->limit(2)->select();        $tuijian=array_merge($videotuijian,$livetuijian);        $this->assign('tuijian',$tuijian);    }    function index(){        $this->checkBangTel();        return $this->fetch('index');    }    /**     * 我购买的课程     */    function mycourse(){        $myCourse=model('userCourse')->order('addtime desc')->where(['uid'=>is_user_login()])->where(['type'=>array('in','1,2')])->select();        foreach ($myCourse as $key => $value) {            $myCourse[$key]['courseInfo']=$this->getCouseInfo($myCourse[$key]['cid'],$myCourse[$key]['type']);            $myCourse[$key]['progress']=round(100*getStuduedNum($myCourse[$key]['cid'],$myCourse[$key]['type'])/getCourseNum($myCourse[$key]['cid'],$myCourse[$key]['type']));            $myCourse[$key]['lastStudy']=getLastStudy($myCourse[$key]['cid'],$myCourse[$key]['type']);            $myCourse[$key]['remain'] =$myCourse[$key]['courseInfo']['youxiaoqi']==0?'永久有效': get_course_last_time($myCourse[$key]['courseInfo'],1);        }        $this->checkBangTel();        return $this->fetch('mycourse',['title'=>'个人中心','myCourse'=>$myCourse]);    }    /**     * 我的班级     */    function myclassroom(){        $myCourse=model('userCourse')->order('addtime desc')->where(['uid'=>is_user_login(),'type'=>3])->select();        foreach ($myCourse as $key => $value) {            $myCourse[$key]['courseInfo']=model('classroom')->where(['id'=>$myCourse[$key]['cid']])->find();            $myCourse[$key]['remain'] =$myCourse[$key]['courseInfo']['youxiaoqi']==0?'永久有效': getLastTime(strtotime("+".$myCourse[$key]['courseInfo']['youxiaoqi']."days",strtotime( $myCourse[$key]['addtime'])));            $myCourse[$key]['progress'] = getAllProgress($myCourse[$key]['cid'], is_user_login());            $myCourse[$key]['isDaoQi']=(strtotime("+".$myCourse[$key]['courseInfo']['youxiaoqi']."days",strtotime($myCourse[$key]['addtime']))<= time() && $myCourse[$key]['courseInfo']['youxiaoqi']>0)?true:false;        }        $this->checkBangTel();        return $this->fetch('myclassroom',['title'=>'我的班级','myclassroom'=>$myCourse]);    }    /**     * 我的测评记录     */    function myceping(){        $myceping=model('myexam')->where(['uid' => is_user_login(),'eid' => array('neq','')])->paginate(config('page_number'));        foreach ($myceping as $key => $value) {            $examinfo=json_to_array(model('exams')->where('id',$value['eid'])->value('examsetting'));            $myceping[$key]['examscore']=$examinfo['examscore'];            $myceping[$key]['passscore']=$examinfo['passscore'];            if($value['cid']){                $certificateInfo=db('certificate')->where(['cid'=>$value['cid'],'uid'=>is_user_login(),'eid'=>$value['eid']])->value('imgurl');                $myceping[$key]['certificate']=$certificateInfo;            }else{                $myceping[$key]['certificate']='';            }        }        return $this->fetch('myceping',['title'=>'我的测评','myceping'=>$myceping]);    }    /**     * 我的证书     */    function mycertificate(){        $param = $this->request->param();        $param['eid']=hashids_decode($param['eid']);        $param['cid']=hashids_decode($param['cid']);        $mycertificate=db('certificate')->where(['cid'=>$param['cid'],'uid'=>is_user_login(),'eid'=>$param['eid']])->value('imgurl');        return $this->fetch('mycertificate',['mycertificatepic'=>'/static/default/certificate/'.$mycertificate]);    }    /**     * 我的证书列表     */    function mycertificatelist(){        $mycertificate=db('certificate')->where(['uid'=>is_user_login()])->select();        foreach ($mycertificate as $key => $value) {            $ctype=db('myexam')->where(['uid'=>is_user_login(),'eid'=>$value['eid'],'cid'=>$value['cid']])->value('ctype');            $mycertificate[$key]['courseName']=getCourseName($value['cid'],$ctype);            $mycertificate[$key]['imgurl']='/static/default/certificate/'.$value['imgurl'];        }        return $this->fetch('mycertificatelist',['list'=>$mycertificate]);    }    /**     * 我的学习证明     */    function prove(){        $param = $this->request->param();        $mycertificate=db('certificate')->where(['id'=>$param['id']])->find();        if($mycertificate['type']==3){            $classroominfo = model('classroom')->where(['id' => $mycertificate['cid']])->find();            $cids = json_to_array($classroominfo['cids']);            foreach ($cids as $k => $v) {                $ids = explode('-', $cids[$k], 2);                $ids[0] == 1 ? $videoCourseNum[$ids[1]] = getCourseNum($ids[1], 1) : $liveCourseNum[$ids[1]] = getCourseNum($ids[1], 2);            }            $xueshi=array_sum($videoCourseNum) + array_sum($liveCourseNum);            $ctype=db('myexam')->where(['uid'=>$mycertificate['uid'],'eid'=>$mycertificate['eid'],'cid'=>$mycertificate['cid']])->value('ctype');            $mycertificate['courseName']=getCourseName($mycertificate['cid'],$ctype);            $mycertificate['userName']=getUserName($mycertificate['uid']);            $mycertificate['cardId']=str_replace(strrchr($mycertificate['imgurl'], "."),"",$mycertificate['imgurl']);            $mycertificate['QRCodeUrl']=UrlEncode(is_https().get_domain().'/index/user/certificateverify/id/'.$mycertificate['id']);            $mycertificate['addtime']=date('Y-m-d', strtotime($mycertificate['addtime']));            $mycertificate['createtime']=date('Y-m-d', time());            $mycertificate['xueshi'] =$xueshi;        }else{            $mycertificate['courseName']=getCourseName($mycertificate['cid'],$mycertificate['type']);            $mycertificate['userName']=getUserName($mycertificate['uid']);            $mycertificate['cardId']=str_replace(strrchr($mycertificate['imgurl'], "."),"",$mycertificate['imgurl']);            $mycertificate['QRCodeUrl']=UrlEncode(is_https().get_domain().'/index/user/certificateverify/id/'.$mycertificate['id']);            $mycertificate['addtime']=date('Y-m-d', strtotime($mycertificate['addtime']));            $mycertificate['createtime']=date('Y-m-d', time());            $mycertificate['xueshi'] =getCourseNum($mycertificate['cid'],$mycertificate['type']);        }        return $this->fetch('prove',['data'=>$mycertificate]);    }    /**     * 我的证书验证     */    function certificateverify(){        $param = $this->request->param();        $mycertificate=db('certificate')->where(['id'=>$param['id']])->find();        if($mycertificate['type']==3){            $classroominfo = model('classroom')->where(['id' => $mycertificate['cid']])->find();            $cids = json_to_array($classroominfo['cids']);            foreach ($cids as $k => $v) {                $ids = explode('-', $cids[$k], 2);                $ids[0] == 1 ? $course[$k]['name'] = getCourseName($ids[1], 1) :  getCourseName($ids[1], 2);                $ids[0] == 1 ? $course[$k]['xueshi'] = getCourseNum($ids[1], 1) :  getCourseNum($ids[1], 2);                $ids[0] == 1 ? $course[$k]['teacher'] = getTeacherName(getTeachetId($ids[1], 1)) :  getTeacherName(getTeachetId($ids[1], 2)) ;                $ids[0] == 1 ? $videoCourseNum[$ids[1]] = getCourseNum($ids[1], 1) : $liveCourseNum[$ids[1]] = getCourseNum($ids[1], 2);                $ids[0] == 1 ? $course[$k]['duration']=db('learned')->where(['cid'=>$ids[1],'type'=>1,'uid'=>$mycertificate['uid']])->sum('duration'):db('learned')->where(['cid'=>$ids[1],'type'=>2,'uid'=>$mycertificate['uid']])->sum('duration');            }            $xueshi=array_sum($videoCourseNum) + array_sum($liveCourseNum);        }else{            $course[1]['name'] = getCourseName($mycertificate['cid'],$mycertificate['type']);            $course[1]['xueshi'] =getCourseNum($mycertificate['cid'],$mycertificate['type']);            $course[1]['teacher'] =getTeacherName(getTeachetId($mycertificate['cid'], $mycertificate['type']));            $course[1]['duration'] = db('learned')->where(['cid'=>$mycertificate['cid'],'type'=>$mycertificate['type'],'uid'=>$mycertificate['uid']])->sum('duration');            $xueshi=getCourseNum($mycertificate['cid'],$mycertificate['type']);        }        $userName=getUserName($mycertificate['uid']);        $title=$mycertificate['certificatetitle'];        return $this->fetch('certificateverify',['data'=>$course,'xueshi'=>$xueshi,'userName'=>$userName,'title'=>$title]);    }    /**     * 我的学习记录     */    function mylearn(){        $this->checkBangTel();        $param = $this->request->param();        $param['id']=hashids_decode($param['id']);        $param['type']=hashids_decode($param['type']);        if(empty($param['id']) || empty($param['type'])){            throw new \think\exception\HttpException(404, '异常消息', null);        }        controller('Course')->isBuy(is_user_login(),$param['id'],$param['type'],$usetype=1);        switch ($param['type'])        {            case 1:                model('videoCourse')->where(['id'=>$param['id']])->setInc('views');                $courseinfo = model('videoCourse')->where(['id'=>$param['id']])->find();                $section=model('videoCourse')->getSection($param['id']);                $comment=model('comment')->where(['cid'=>$courseinfo['id'],'cstype'=>1])->order('addtime desc')->limit(10)->select();                $material=model('material')->where('id', 'in', json_to_array($courseinfo['material_id']))->order('addtime desc')->select();                $studiedNum=getStuduedNum($param['id'],$param['type']);                $allNum=getCourseNum($param['id'],$param['type']);                $lastStudy=getLastStudy($param['id'],$param['type']);                $remain=$courseinfo['youxiaoqi']==0?'永久有效': get_course_last_time($courseinfo,1);                $isDaoQi=$courseinfo['youxiaoqi']==0? false: get_course_last_time($courseinfo,2);                $progress=round(100*$studiedNum/$allNum).'%';                $teacherInfo=model('cooperate')->where('id',$courseinfo['teacher_id'])->find();                $courseUser=model('userCourse')->where(['cid'=>$param['id'],'type'=>1])->limit(18)->select();                return $this->fetch('mylearn',['title'=>$courseinfo['title'],'courseUser'=>$courseUser,'teacherInfo'=>$teacherInfo,'info'=>$courseinfo,'secList'=>$section,'studiedNum'=>$studiedNum,'allNum'=>$allNum,'lastStudy'=>$lastStudy,'progress'=>$progress,'comment'=>$comment,'material'=>$material,'remain'=>$remain,'isDaoQi'=>$isDaoQi]);                break;            case 2:                model('liveCourse')->where(['id'=>$param['id']])->setInc('views');                $courseinfo = model('liveCourse')->where(['id'=>$param['id']])->find();                $section=model('liveCourse')->getSection($param['id']);                $comment=model('comment')->where(['cid'=>$courseinfo['id'],'cstype'=>2])->order('addtime desc')->limit(10)->select();                $material=model('material')->where('id', 'in', json_to_array($courseinfo['material_id']))->order('addtime desc')->select();                $studiedNum=getStuduedNum($param['id'],$param['type']);                $allNum=getCourseNum($param['id'],$param['type']);                $lastStudy=getLastStudy($param['id'],$param['type']);                $courseUser=model('userCourse')->where(['cid'=>$param['id'],'type'=>2])->limit(18)->select();                $remain=$courseinfo['youxiaoqi']==0?'永久有效': get_course_last_time($courseinfo,1);                $isDaoQi=$courseinfo['youxiaoqi']==0? false: get_course_last_time($courseinfo,2);                $progress=round(100*$studiedNum/$allNum).'%';                $teacherInfo=model('cooperate')->where('id',$courseinfo['teacher_id'])->find();                $recentlyLive=model('liveSection')->where('csid',$param['id'])->where('starttime','gt',date('Y-m-d H:i:s', time()))->order('starttime asc')->limit(1)->select();                return $this->fetch('mylearn',['title'=>$courseinfo['title'],'recentlyLive'=>$recentlyLive,'courseUser'=>$courseUser,'teacherInfo'=>$teacherInfo,'info'=>$courseinfo,'secList'=>$section,'studiedNum'=>$studiedNum,'lastStudy'=>$lastStudy,'allNum'=>$allNum,'progress'=>$progress,'comment'=>$comment,'material'=>$material,'remain'=>$remain,'isDaoQi'=>$isDaoQi]);                break;        }    }    /**     * 我的收藏     */    function myfavourite(){        $myFavourite=db('favourite')->where(['uid'=>is_user_login()])->select();        foreach ($myFavourite as $key => $value) {            $myFavourite[$key]['courseInfo']=$this->getCouseInfo($myFavourite[$key]['cid'],$myFavourite[$key]['type']);        }        return $this->fetch('myfavourite',['title'=>'我的收藏','myFavourite'=>$myFavourite]);    }    /**     * 我的订单     */    function myorder(){        $list=model('order')->order('id desc')->where('ctype','neq',4)->where(['uid'=>is_user_login()])->paginate(config('page_number'));        return $this->fetch('myorder',['title'=>'我的订单','list'=>$list]);    }    /**     * 我的优惠券     */    function mycoupon(){        $list=model('coupon')->order('id desc')->where(['userId'=>is_user_login()])->paginate(config('page_number'));        if(empty($list)){            $empty=true;        }else{            $empty=false;        }        dump($empty);        return $this->fetch('mycoupon',['title'=>'我的优惠券','list'=>$list,'empty'=>$empty]);    }    /**     * 我的推广     */    function mypopularize(){        $url=is_https().get_domain().url('index/index/index',array('code'=>hashids_encode(is_user_login(),'yunknet','8')));        $url2=is_https().get_domain().url('index/index/index',array('code'=>hashids_encode(is_user_login(),'yunknet','8')));        $url2=str_replace('/','*',$url2);        return $this->fetch('mypopularize',['title'=>'我的推广','url'=>$url,'url2'=>$url2]);    }    /**     * 我的推广列表     */    function mypopularizelist(){        $one=model('distribution')->where('fatherid',is_user_login())->field('uid')->select();        foreach ($one as $k=> $value) {            $oneIds[]=$one[$k]['uid'];        }        if(!empty($one)){            $tow=model('distribution')->where('fatherid','in',$oneIds)->field('uid')->select();            foreach ($tow as $k=> $value) {                $towIds[]=$tow[$k]['uid'];            }        }        if(!empty($tow)){            $three=model('distribution')->where('fatherid','in',$towIds)->field('uid')->select();            foreach ($three as $k=> $value) {                $threeIds[]=$three[$k]['uid'];            }        }        return $this->fetch('mypopularizelist',['title'=>'我的推广列表','oneIds'=>$oneIds,'towIds'=>$towIds,'threeIds'=>$threeIds,'uid'=>is_user_login()]);    }    /**     * 若是由推广链接注册，则写入信息     */    function popularize($uid){        if(!empty(session('code'))){            $data=['uid'=>$uid,'fatherid'=>hashids_decode(session('code'),'yunknet','8'),'addtime'=>date('Y-m-d H:i:s', time())];            if($this->insert('distribution',$data)===true){                session('code', null);            }        }    }    /**     * 删除我的订单     */    function  orderDel(){        if ($this->request->isPost()) {            if ($this->delete('order', $this->request->param()) === true) {                insert_user_log('删除订单');                $this->success('删除成功');            } else {                $this->error($this->errorMsg);            }        }    }    /**     * 个人信息     */    function myinfo(){        if ($this->request->isPost()) {            $param = $this->request->param();            if(is_user_login()==$param['id']){                if ($this->update('user', $param, input('_verify', true)) === true) {                    $this->success('修改成功', url('index/user/myinfo'));                } else {                    $this->error($this->errorMsg);                }            }else{                $this->error('只能修自己的数据信息');            }        }        $regfield= model('regfield')->select();        $grade=model('grade')->order('sort_order asc')->select();        $school=model('school')->order('sort_order asc')->select();        return $this->fetch('myinfo',['title'=>'我的个人信息','regfield'=>$regfield,'grade'=>$grade,'school'=>$school]);    }    /**     * 我的错题     */    function myerrors(){        return $this->fetch('myerrors');    }    /**     * 课程点卡     */    function card(){        if ($this->request->isPost()) {            $param = $this->request->param();            $cardInfo= model('card')->where(['number'=>$param['number']])->find();            $userInfo= model('user')->where(['id'=>is_user_login()])->find();            !$cardInfo &&  $this->error('此卡号错误，请核实重新输入！');            $cardInfo['usestatus']==1 && $this->error('此卡号已被使用，请核实重新输入！');            $cardInfo['status']==1 && $this->error('此卡号已被禁用，请核实重新输入！');            $yue=$cardInfo['money']+$userInfo['yue'];            if ($this->update('user', ['id'=>is_user_login(),'yue'=>$yue], input('_verify', false)) === true) {                $this->update('card', ['number'=>$param['number'],'usestatus'=>1,'buystatus'=>1,'uid'=>is_user_login()], input('_verify', false),$field = true,$key='number');                $this->success('充值成功', url('index/user/index'));            } else {                $this->error($this->errorMsg);            }        }        return $this->fetch('card',['title'=>'课程点卡充值']);    }    /**     * 用户登录     */    function login(){        is_user_login() && $this->redirect(url('index/user/index'));        if ($this->request->isPost()) {            $param = $this->request->param();            $result = $this->validate($param, 'login');            if ($result !== true) {                $this->error($result);            }            if(check_mobile($param['username'])){                $where['mobile']=$param['username'];                $where['password']=md5($param['password']);            }else{                $where['username']=$param['username'];                $where['password']=md5($param['password']);            }            $user = model('user')->where($where)->find();            if ($user) {                $user['status'] != 1 && $this->error('账号已禁用');                $auth = [                    'user_id' => $user['id'],                    'username' => $user['username'],                ];                session('user_auth', $auth);                session('user_auth_sign', data_auth_sign($auth));                insert_user_log('学员登录');                $this->addjifen('login',$user['id']);                model('user')->save([                    'last_login_time' => time(),                    'last_login_ip'   => $this->request->ip(),                    'login_count'     => $user['login_count'] + 1,                ], ['id' => $user['id']]);                if($user['is_teacher']==1){                    $adminauth = [                        'admin_id' => $user['admin_id'],                        'username' => $user['username'],                    ];                    session('admin_auth', $adminauth);                    session('admin_auth_sign', data_auth_sign($adminauth));                }                if($returnUrl = session('returnUrl')) {                    $this->success('登录成功', $returnUrl);                }else{                    $this->success('登录成功', url('index/user/index'));                }            } else {                $this->error('账号或密码错误');            }        }        return $this->fetch('login',['title'=>'用户登录']);    }    /**     * 用户退出     */    function logout(){        session('user_auth', null);        session('user_auth_sign', null);        session('admin_auth', null);        session('admin_auth_sign', null);        if($returnUrl = session('returnUrl')) {            $this->redirect($returnUrl);        }else{            $this->redirect(url('index/user/login'));        }    }    /**     * 用户注册     */    function reg(){        $MC= model('system')->where('name', 'SmsTemplates_MC')->find();        $data =unserialize($MC['value']);        if ($this->request->isPost()) {            $param = $this->request->param();            $result = $this->validate($param, 'login');            if ($result !== true) {                $this->error($result);            }            if(model('user')->where(['mobile' => $param['mobile']])->find()){                $this->error('手机号已被注册');exit();            }            if($data['status']==1){                if(session('telphoneCode')!=$param['codeverify']){                    $this->error('手机验证码错误');exit();                }                if(session('telphone')!=$param['mobile']){                    $this->error('手机号码输入有误');exit();                }            }            if(model('user')->where(['username' => $param['username']])->find()){                $this->error('用户名已被注册');            }            if($this->insert('user',$param) === true){                $user= model('user')->where(['username' => $param['username']])->find();                $auth = [                    'user_id' => $user['id'],                    'username' => $user['username'],                ];                $this->coupon('reg',$user['id']);                $this->popularize($user['id']);                session('user_auth', $auth);                session('user_auth_sign', data_auth_sign($auth));                session('telphoneCode', null);                session('telphone', null);                $this->success('注册成功', url('index/user/index'));            }else{                $this->error($this->errorMsg);            }        }        return $this->fetch('reg',['title'=>'用户注册','data'=>$data]);    }    /**     * 教师入驻     */    function cooperate(){        if ($this->request->isPost()) {            $param = $this->request->param();            if($this->insert('cooperate',$param) === true){                $this->success('申请成功,敬请期待审核!', url('index/user/index'));            }        }else{            for ($x = 0; $x <= 30; $x++) {                $y_array[$x] = date("Y", strtotime("-15 year")) - $x . '年';            }            for ($x = 1; $x <= 12; $x++) {                $m_array[$x] = $x . '月';            }            for ($x = 1; $x <= 31; $x++) {                $d_array[$x] = $x . '日';            }            $ordinance=model('other')->where(['type'=>'ordinance'])->find();            return $this->fetch('cooperate', ['title'=>'教师入驻','y' => $y_array, 'm' => $m_array, 'd' => $d_array,'uid'=>is_user_login(),'ordinance'=>$ordinance]);        }    }    /**     * 上传头像     */    function upavatar(){        try {            $file = $this->request->file('file');            $info = $file->move(ROOT_PATH . 'public' . DS . 'upload' . DS . 'image');            if ($info) {                $upload_image = unserialize(config('upload_image'));                if ($upload_image['is_thumb'] == 1 || $upload_image['is_water'] == 1 || $upload_image['is_text'] == 1) {                    $object_image = \think\Image::open($info->getPathName());                    // 图片压缩                    if ($upload_image['is_thumb'] == 1) {                        $object_image->thumb($upload_image['max_width'], $upload_image['max_height']);                    }                    // 图片水印                    if ($upload_image['is_water'] == 1) {                        $object_image->water(ROOT_PATH . str_replace('/', '\\', trim($upload_image['water_source'], '/')), $upload_image['water_locate'], $upload_image['water_alpha']);                    }                    // 文本水印                    if ($upload_image['is_text'] == 1) {                        $font = !empty($upload_image['text_font']) ? str_replace('/', '\\', trim($upload_image['text_font'], '/')) : 'vendor\topthink\think-captcha\assets\zhttfs\1.ttf';                        $object_image->text($upload_image['text'], ROOT_PATH . $font, $upload_image['text_size'], $upload_image['text_color'], $upload_image['text_locate'], $upload_image['text_offset'], $upload_image['text_angle']);                    }                    $object_image->save($info->getPathName());                }                return ['code' => 1, 'url' => '/upload/image/' . str_replace('\\', '/', $info->getSaveName())];            } else {                return ['code' => 0, 'msg' => $file->getError()];            }        } catch (\Exception $e) {            return ['code' => 0, 'msg' => $e->getMessage()];        }    }    /**     * 绑定手机号     */    function binding(){        if ($this->request->isPost()) {            $param = $this->request->param();            if(!is_user_login()){                $MC= model('system')->where('name', 'SmsTemplates_MC')->find();                $MCdata =unserialize($MC['value']);                if($MCdata['status']==1){                    if(session('telphoneCode')!=$param['codeverify']){                        $this->error('手机验证码错误');exit();                    }                    if(session('telphone')!=$param['mobile']){                        $this->error('手机号码输入有误');exit();                    }                }                $data['mobile']  = $param['mobile'];                $data['greadId'] = $param['greadId'];                $data['schoolId']= $param['schoolId'];                $data['username']= $param['username'];                $data['nickname']= $param['nickname'];                $data['password']= md5($param['password']);                if(!empty(session('regInfo.openid'))){                    $data['openid']=session('regInfo.openid');                }                if(!empty(session('regInfo.qqopenid'))){                    $data['qqopenid']=session('regInfo.qqopenid');                }                $user = model('user')->where(['username' => $param['username'],'mobile'=>$param['mobile']])->find();                if(!empty($user)){                    $data['id']=$user['id'];                    if ($this->update('user', $data, input('_verify', false)) === true) {                        session('telphoneCode', null);                        session('telphone', null);                        session('regInfo', null);                    } else {                        $this->error($this->errorMsg);                    }                }else{                    $data['avatar']=session('regInfo.avatar');                    $data['create_time']=session('regInfo.create_time');                    $data['login_count']=session('regInfo.login_count');                    $data['status']=1;                    $data['yue']=0;                    $id=db('user')->insertGetId($data);                    $user = model('user')->where(['id' => $id])->find();                    session('telphoneCode', null);                    session('telphone', null);                    session('regInfo', null);                }                $user['status'] != 1 && $this->error('账号已禁用');                $auth = [                    'user_id' => $user['id'],                    'username' => $user['username'],                ];                session('user_auth', $auth);                session('user_auth_sign', data_auth_sign($auth));                model('user')->save([                    'last_login_time' => time(),                    'last_login_ip'   => $this->request->ip(),                    'login_count'     => $user['login_count'] + 1,                ], ['id' => $user['id']]);                if($user['is_teacher']==1){                    $adminauth = [                        'admin_id' => $user['admin_id'],                        'username' => $user['username'],                    ];                    session('admin_auth', $adminauth);                    session('admin_auth_sign', data_auth_sign($adminauth));                }                $this->success('绑定成功', url('index/user/index'));            }else{                $param['id']=is_user_login();                if ($this->update('user', $param, input('_verify', false)) === true) {                    $this->success('绑定成功', url('index/user/index'));                } else {                    $this->error($this->errorMsg);                }            }        }        $regfield= model('regfield')->select();        $grade=model('grade')->order('sort_order asc')->select();        $school=model('school')->order('sort_order asc')->select();        $MC= model('system')->where('name', 'SmsTemplates_MC')->find();        $data =unserialize($MC['value']);        return $this->fetch('binding',['title'=>'绑定手机号','regfield'=>$regfield,'grade'=>$grade,'school'=>$school,'data'=>$data]);    }    /**     * 手机号找回密码     */    function findpass(){        if ($this->request->isPost()) {            $param = $this->request->param();            $result = $this->validate($param, 'FandPass');            if ($result !== true) {                $this->error($result);            }            if(!model('user')->where(['mobile' => $param['mobile']])->find()){                $this->error('该手机号还未注册');exit();            }            if(session('telphoneCode')!=$param['codeverify']){                $errorTimes=session('errorTimes');                $errorTimes++;                session('errorTimes', $errorTimes);                if(session('errorTimes')>5){                    session('telphoneCode', null);                    session('errorTimes', null);                    $this->error('验证码出错次数过多，请刷新重试！');exit();                }                $this->error('手机验证码错误');exit();            }            if(session('telphone')!=$param['mobile']){                $this->error('手机号码输入有误');exit();            }            if (model('user')->where(['mobile'=>$param['mobile']])->update(['password'=>md5($param['password'])])) {                session('telphoneCode', null);                session('telphone', null);                $this->success('密码重置成功', url('index/user/login'));            } else {                $this->error($this->errorMsg);            }        }        session('errorTimes', 0);        return $this->fetch('findpass',['title'=>'找回密码']);    }    /**     * 密码修改     */    function repass(){        if ($this->request->isPost()) {            $param = $this->request->param();            $userInfo= model('user')->where(['id'=>is_user_login()])->find();            if(!empty($userInfo['password'])){                md5($param['oldpass'])!=$userInfo['password'] && $this->error('原始密码输入有误！');            }            $param['password']!=$param['repassword'] && $this->error('重复密码有误');            if ($this->update('user', ['id'=>is_user_login(),'password'=>$param['password']], input('_verify', false)) === true) {                session('user_auth', null);                session('user_auth_sign', null);                insert_user_log('修改密码');                $this->success('修改密码成功', url('index/user/login'));            } else {                $this->error($this->errorMsg);            }        }        return $this->fetch('repass',['title'=>'修改密码']);    }    /**     * vip页面     */    function vip(){        if(config('isvipopen')){            return $this->fetch('vip',['yueprice'=>config('vipyueprice'),'jiprice'=>config('vipjiprice'),'nianprice'=>config('vipnianprice')]);        }else{            $this->error('VIP功能尚未开启');        }    }    /**     * vip购买页面     */    function buyvip(){        if(!config('isvipopen')){            $this->error('VIP功能尚未开启');        }        if(input('type')=='yue'){            $type='月度会员';            $duration='1';            $order['title']="月度VIP会员";            $price=config('vipyueprice');        }        if(input('type')=='ji'){            $type='季度会员';            $duration='3';            $order['title']="季度VIP会员";            $price=config('vipjiprice');        }        if(input('type')=='nian'){            $type='年度会员';            $duration='12';            $order['title']="年度VIP会员";            $price=config('vipnianprice');        }        if ($this->request->isPost()){            $param = $this->request->param();            if(($coupon=model('coupon')->where(['code'=>$param['usedCoupon']])->find()) && !empty($param['usedCoupon'])){                $order['total']= round($price*$coupon['rate']/10,1);            }else{                $order['total']= $price;            }            $order['ctype']=4;            $order['duration']=$duration;            $order['state']=0;            $order['addtime']=date('Y-m-d H:i:s', time());            $order['uid']=is_user_login();            $order['paytype']=$param['payment'];            $order['orderid']= date('Ymdhms');            $res=$this->insert('order',$order);            if ($res === true) {                db('coupon')->where(['code'=>$param['usedCoupon']])->update(['usestatus'=>1]);                return $this->payment($order,$duration);            } else {                $this->error($this->errorMsg);            }        }else{            return $this->fetch('buyvip',['type'=>$type,'duration'=>$duration,'price'=>$price]);        }    }    /**     * 订单支付     */    function payment($order){        if($order['paytype']=='alipay'){            return  $this->alipay($order);        }        if($order['paytype']=='wxpay'){            return  $this->wxpay($order);        }        if($order['paytype']=='yuepay'){            return  $this->yuepay($order);        }    }    /**     * 支付宝支付     */    function alipay($order){        if(request()->isMobile()){            $payData = [                'order_no' =>$order['orderid'],                'order_price' => $order['total'],                'subject' => $order['title'],                'notify_url' =>is_https().get_domain(). '/index/user/notifyalipay/',                'return_url'=>is_https().get_domain(). '/index/user/return_url/',            ];            $alipay = new Alipay($this->alipayConfig());            $info = $alipay->placeWap($payData);            return $this->fetch('aliPay',['info'=>$info['html_form'],]);        }else{            $payData = [                'order_no' =>$order['orderid'],                'order_price' => $order['total'],                'subject' => $order['title'],                'notify_url' =>is_https().get_domain(). '/index/user/notifyalipay/',                'return_url'=>is_https().get_domain(). '/index/user/return_url/',            ];            $alipay = new Alipay($this->alipayConfig());            $info = $alipay->placePage($payData);            return $this->fetch('aliPay',['info'=>$info['html_form'],]);        }    }    /**     * 微信支付     */    function wxpay($order){        if(request()->isMobile()){            if(in_wechat()){                $data=$this->wechatJsApiConfig();                session('orderId',$order['orderid']);                $WechatJsapi=new WechatJsapi($data);                $WechatJsapi->getCode(is_https().get_domain().'/index/user/getcode/');            }else{                $redirect_url=is_https().get_domain().'/ordersettle/'.$order['orderid'];                $data=$this->wechatConfig();                $name="微信支付";                $payData = [                    'body'=>$order['title'],                    'out_trade_no'=>$order['orderid'],                    'total_fee'=> $order['total']*100,                    'trade_type'=> 'MWEB',                    'wap_url'=>is_https().get_domain(),                    'wap_name'=>$name,                    'notify_url'=>get_domain().'/index/course/notifywechat/',                    'scene_info'=>'{"h5_info": {"type":"Wap","wap_url": "'.is_https().get_domain().'","wap_name": "'.$name.'"}}'                ];                $wechatPay = new WechatPay($data);                $info = $wechatPay->unifiedOrder($payData);                $url_encode_redirect=urlencode($redirect_url);                $url = $info['mweb_url'].'&redirect_url='.$url_encode_redirect;                echo "<script>window.location.href='".$url."';</script>";            }        }else{            $payData = [                'body' => $order['title'],                'out_trade_no' =>$order['orderid'],                'total_fee' => $order['total']*100,                'trade_type' => 'NATIVE',                'notify_url' =>get_domain().'/index/course/notifywechat/',                'expire'=>'600'            ];            $wechatPay = new WechatPay($this->wechatJsApiConfig());            $info = $wechatPay->unifiedOrder($payData);            $url=str_replace("/","*",$info['code_url']);            $url=str_replace("?","$",$url);            $info['code_url']=urlencode($url);            $info['return_code'] == 'FAIL';            $info['result_code'] == 'FAIL';            return $this->fetch('wechatPay',['info'=>$info,'order'=>$order]);        }    }    function getcode(){        $param = $this->request->param();        if($param['type']=='login'){            $this->redirect('api/author/appcallbac', ['code' => $param['code']]);        }else{            $data=$this->wechatJsApiConfig();            $WechatJsapi=new WechatJsapi($data);            $AccessToken=$WechatJsapi->getAccessToken($param['code']);            $order=model('order')->where('orderid',session('orderId'))->find();            $order['title']='VIP会员购买';            $payData = [                'body'=>$order['title'],                'out_trade_no'=>$order['orderid'],                'total_fee'=> $order['total']*100,                'trade_type'=> 'JSAPI',                'notify_url'=>get_domain(). '/index/user/notifywechat/',                'openid'=>$AccessToken['openid']            ];            $wechatPay = new WechatPay($data);            $info = $wechatPay->unifiedOrder($payData);            $jsApiParameters= $wechatPay->getJsapiParam($info['prepay_id']);            return $this->fetch('wechatJsPay',['jsApiParameters'=>$jsApiParameters,'order'=>$order]);        }    }    /**     * 余额支付     */    function yuepay($orderInfo){        $userInfo=model('user')->where(['id'=>is_user_login()])->find();        $userInfo['yue']<$orderInfo['total'] && $this->error('余额不足，请先充值');        $this->update('order', ['profit'=>0,'state'=>1,'payorder'=>'','orderid'=>$orderInfo['orderid']], $rule = true, $field = true, $key = 'orderid');        //支付成功，写入数据库        $res=$this->addVip(is_user_login(),$orderInfo['duration']);        //分销提成        model('distribution')->distribution($orderInfo['uid'],$orderInfo['total'],$orderInfo['cid'],$orderInfo['ctype']);        if($res){            db('user')->where(['id'=>is_user_login()])->update(['yue'=>$userInfo['yue']-$orderInfo['total']]);            $this->addjifenByGouke($orderInfo['uid'],$orderInfo['total']);            $this->sentMessage(0,$orderInfo['uid'],0,'成功购买VIP会员',$orderInfo['ctype'],0);            $this->coupon('buy',$orderInfo['uid']);            return  $this->payResult($orderInfo);        }    }    /**     * 支付宝回调处理     */    function notifyalipay()    {        $alipay = new Alipay($this->alipayConfig());        if($alipay->rsaCheck($verify = $_POST)) {            $orderInfo = model('order')->where(['orderid'=>$verify['out_trade_no']])->find();            if ($this->checkOrder($verify['out_trade_no'])) {                $this->update('order', ['profit'=>0,'state'=>1,'payorder'=>$verify['trade_no'], 'orderid'=>$verify['out_trade_no']], $rule = true, $field = true, $key = 'orderid');                $res=$this->addVip(is_user_login(),$orderInfo['duration']);                $this->addjifenByGouke($orderInfo['uid'],$orderInfo['total']);                $this->sentMessage(0,$orderInfo['uid'],0,'成功购买VIP会员',$orderInfo['ctype'],0);                //分销提成                model('distribution')->distribution($orderInfo['uid'],$orderInfo['total'],$orderInfo['cid'],$orderInfo['ctype']);                $this->coupon('buy',$orderInfo['uid']);            }            echo "success";        }else {            echo "fail";        }    }    /**     * 支付宝回调处理     */    function return_url(){        $alipay = new Alipay($this->alipayConfig());        if($alipay->rsaCheck($verify = $_GET)) {            $orderInfo = model('order')->where(['orderid'=>$verify['out_trade_no']])->find();            if ($this->checkOrder($verify['out_trade_no'])) {                $this->update('order', ['profit'=>0,'state'=>1,'payorder'=>$verify['trade_no'], 'orderid'=>$verify['out_trade_no']], $rule = true, $field = true, $key = 'orderid');                $res=$this->addVip(is_user_login(),$orderInfo['duration']);                $this->addjifenByGouke($orderInfo['uid'],$orderInfo['total']);                $this->sentMessage(0,$orderInfo['uid'],0,'成功购买VIP会员',$orderInfo['ctype'],0);                //分销提成                model('distribution')->distribution($orderInfo['uid'],$orderInfo['total'],$orderInfo['cid'],$orderInfo['ctype']);                $this->coupon('buy',$orderInfo['uid']);            }            return $this->redirect(url('index/user/payResult',['orderid'=>$orderInfo['orderid']]));        }else {            echo "fail";        }    }    /**     * 苹果内购回调处理     */    function appleiap(){        $param = $this->request->param();        $param['out_trade_no']='20230204120227';        $param['uid']='14';        $param['duration']='1';        $param['total']='30';        if ($this->checkOrder($param['out_trade_no'])) {            $this->update('order', ['profit'=>0,'state'=>1,'payorder'=>$param['out_trade_no'], 'orderid'=>$param['out_trade_no']], $rule = true, $field = true, $key = 'orderid');            if($this->addVip($param['uid'],$param['duration'])){                $this->addjifenByGouke($param['uid'],$param['total']);                $this->sentMessage(0,$param['uid'],0,'成功购买VIP会员',4,0);                $this->coupon('buy',$param['uid']);                $res['code']=0;                return json_encode($res) ;            }        }    }    function checkOrder($out_trade_no){        if(model('order')->where(['orderid'=>$out_trade_no])->value('state')==1){            return false;        }else{            return true;        };    }    /**     * 生成二维码     */    public function qrcode(){        vendor('phpqrcode.phpqrcode');        $param = $this->request->param();        $url=str_replace("*","/",urldecode($param['url']));        $url=str_replace("$","?",$url);        $level = 'Q';        $size = 6;        \QRcode::png($url, false, $level, $size);    }    /**     * 检测支付结果     */    public function checkPay(){        $param = $this->request->param();        $param['orderid']=$param['orderid'];        $orderInfo = model('order')->where(['orderid'=>$param['orderid']])->value('state');        if($orderInfo==1){            $result['states']=true;        }else{            $result['states']=false;        }        $json_string = json_encode($result);        echo $json_string;    }    /**     * 微信手机支付订单处理等待     */    function ordersettle(){        $param = $this->request->param();        return $this->fetch('ordersettle',['orderid'=>$param['orderid']]);    }    function appordersettle(){        $orderid=session('orderId');        session('orderId',null);        return $this->fetch('ordersettle',['orderid'=>$orderid]);    }    /**     * 支付结果回显     */    public function payResult($orderInfo=''){        if(empty($orderInfo)){            $param = $this->request->param();            $orderInfo=model('order')->where(['orderid'=>$param['orderid']])->find();        }else{            $orderInfo=model('order')->where(['orderid'=>$orderInfo['orderid']])->find();        }        return $this->fetch('payResult',['orderInfo'=>$orderInfo]);    }    /**     * 支付成功，写入数据库     */    function addVip($uid,$duration){        $vipInfo=model('vip')->where(['uid'=>$uid])->find();        $now=time();        if($vipInfo){            $endtime=strtotime($vipInfo['endtime']);            if($now>$endtime){                $newendtime=date("Y-m-d H:i:s",strtotime('+'.$duration.' month',$now));            }else{                $newendtime=date("Y-m-d H:i:s",strtotime('+'.$duration.' month',$endtime));            }            if(model('vip')->where(['uid'=>$uid])->update(['endtime'=>$newendtime])){                return true;            }else{                $this->error($this->errorMsg);            }        }else{            $newendtime=date("Y-m-d H:i:s",strtotime('+'.$duration.' month',$now));            if($this->insert('vip',['uid'=>$uid,'endtime'=>$newendtime, 'addtime'=>date('Y-m-d H:i:s', time())])){                return true;            }else{                $this->error($this->errorMsg);            }        }    }    /**     * 生成证书预览     */    function certificate(){        $param = $this->request->param();        $identifier='preview_'.date('YmdH', time()).mt_rand(1000,9999);        $nian=date('Y', time());        $yue=date('n', time());        $ri=date('j', time());        $username='某某';        $filename = ROOT_PATH .'public/static/default/certificate/'.$identifier.'.jpg';        $config = array(            'image'=>array(                array(                    'url'=>ROOT_PATH .'public/static/default/img/seal.png',                    'is_yuan'=>false,                    'stream'=>0,                    'left'=>320,                    'top'=>890,                    'right'=>0,                    'width'=>280,                    'height'=>280,                    'opacity'=>100                )            ),            'text'=>array(                array(                    'text'=>'编号：'.$identifier,                    'left'=>1200,                    'top'=>136,                    'fontSize'=>28,                    'fontColor'=>'90,90,90',                    'angle'=>0,                    'fontPath'=>ROOT_PATH.'vendor/topthink/think-captcha/assets/zhttfs/1.ttf',                ),                array(                    'text'=>$username,                    'left'=>170,                    'top'=>576,                    'fontSize'=>32,                    'fontColor'=>'90,90,90',                    'angle'=>0,                    'fontPath'=>ROOT_PATH.'vendor/topthink/think-captcha/assets/zhttfs/1.ttf',                ),                array(                    'text'=>$param['kemu'],                    'left'=>480,                    'top'=>700,                    'fontSize'=>32,                    'fontColor'=>'90,90,90',                    'angle'=>0,                    'fontPath'=>ROOT_PATH.'vendor/topthink/think-captcha/assets/zhttfs/1.ttf',                ),                array(                    'text'=>$nian,                    'left'=>1100,                    'top'=>1016,                    'fontSize'=>28,                    'fontColor'=>'90,90,90',                    'angle'=>0,                    'fontPath'=>ROOT_PATH.'vendor/topthink/think-captcha/assets/zhttfs/1.ttf',                ),                array(                    'text'=>$yue,                    'left'=>1250,                    'top'=>1016,                    'fontSize'=>28,                    'fontColor'=>'90,90,90',                    'angle'=>0,                    'fontPath'=>ROOT_PATH.'vendor/topthink/think-captcha/assets/zhttfs/1.ttf',                ),                array(                    'text'=>$ri,                    'left'=>1333,      //小于0为小平居中                    'top'=>1016,                    'fontSize'=>28,     //字号                    'fontColor'=>'90,90,90',    //字体颜色                    'angle'=>0,                    'fontPath'=>ROOT_PATH.'vendor/topthink/think-captcha/assets/zhttfs/1.ttf',     //字体文件                )            ),            'background'=>ROOT_PATH .'public/static/default/img/certificate.png'        );        $imgurl=basename( createPoster($config,$filename));        return $this->fetch('certificate',['imgurl'=>'/static/default/certificate/'.$imgurl]);    }}